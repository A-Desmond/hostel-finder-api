// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  perms       String[] @default(["login_code"])
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id              Int             @id @default(autoincrement())
  username        String          @unique
  password        String
  firstName       String?
  lastName        String?
  avatar          String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  roleId          Int?
  role            Role?           @relation(fields: [roleId], references: [id])
  status          String          @default("active")
  hostelsOwned    Hostel[]        @relation("OwnedHostels")
  hostelsAuthored Hostel[]        @relation("AuthoredHostels")
  rooms   RoomOccupancy[]
  room_request  RoomRequest[]
  payment  Payment[]
}

model Hostel {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  lat       Float?
  lng       Float?
  city      String
  town      String
  image     String?
  no_rooms  Int
  avail_rooms Int  @default(5)
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   Int
  owner     User     @relation("OwnedHostels", fields: [ownerId], references: [id])
  authorId  Int
  author    User     @relation("AuthoredHostels", fields: [authorId], references: [id])
  rooms     Room[]

  room_request RoomRequest[]
}

model Room {
  id           Int             @id @default(autoincrement())
  name         String
  numOccupants Int
  tenant       Int @default(0)
  description  String?
  available    Boolean         @default(true)
  unitCost     Float
  hostelId     Int
  hostel       Hostel          @relation(fields: [hostelId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  occupants    RoomOccupancy[]
  room_request  RoomRequest[]
}

model RoomOccupancy {
  id        Int       @id @default(autoincrement())
  userId    Int
  roomId    Int
  startDate DateTime  @db.Date()
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    String    @default("active")
  amount    Decimal   @db.Decimal(10, 2)
  year      String
  user      User      @relation(fields: [userId], references: [id])
  room      Room      @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId,status])
}

model RoomRequest {
  id       Int    @id @default(autoincrement())
  hostelId Int
  hostel   Hostel @relation(fields: [hostelId], references: [id])
  roomId  Int
  room  Room  @relation(fields: [roomId],references: [id])
  amount Decimal @db.Decimal(10,2)
  year String
  customerId Int
  customer  User @relation(fields: [customerId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("active")
  notes    String?
  @@unique([customerId, roomId,status])
}


model Payment{
  id       Int    @id @default(autoincrement())
  amount Decimal @db.Decimal(10,2)
  payment_type String @default("momo")
  meta  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("active")
  customerId Int
  customer User @relation(fields: [customerId],references: [id])
}