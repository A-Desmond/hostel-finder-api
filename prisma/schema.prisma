// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  perms       String[] @default(["login_code"])
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id              Int             @id @default(autoincrement())
  username        String          @unique
  password        String
  firstName       String?
  lastName        String?
  avatar          String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  roleId          Int?
  role            Role?           @relation(fields: [roleId], references: [id])
  status          String          @default("active")
  hostelsOwned    Hostel[]        @relation("OwnedHostels")
  hostelsAuthored Hostel[]        @relation("AuthoredHostels")
  RoomOccupancy   RoomOccupancy[]
}

model Hostel {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  lat       Float?
  lng       Float?
  city      String
  town      String
  image String?
  no_rooms  Int
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   Int
  owner     User     @relation("OwnedHostels", fields: [ownerId], references: [id])
  authorId  Int
  author    User     @relation("AuthoredHostels", fields: [authorId], references: [id])
  rooms     Room[]
}

model Room {
  id              Int             @id @default(autoincrement())
  name            String
  numOccupants    Int
  description     String?
  available    Boolean   @default(true)
  unitCost  Float
  hostelId        Int
  hostel          Hostel          @relation(fields: [hostelId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  occupants       RoomOccupancy[]
}

model RoomOccupancy {
  id        Int       @id @default(autoincrement())
  userId    Int
  roomId    Int
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    String    @default("active")
  amount    Decimal   @db.Decimal(10, 2)
  year      DateTime
  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId, startDate])
}
